// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: branch.proto

package alpha_pos_system_product_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PosStoreBranchServiceClient is the client API for PosStoreBranchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PosStoreBranchServiceClient interface {
	CreatePosStoreBranch(ctx context.Context, in *CreatePosStoreBranchRequest, opts ...grpc.CallOption) (*CreatePosStoreBranchResponse, error)
	ReadPosStoreBranch(ctx context.Context, in *ReadPosStoreBranchRequest, opts ...grpc.CallOption) (*ReadPosStoreBranchResponse, error)
	UpdatePosStoreBranch(ctx context.Context, in *UpdatePosStoreBranchRequest, opts ...grpc.CallOption) (*UpdatePosStoreBranchResponse, error)
	DeletePosStoreBranch(ctx context.Context, in *DeletePosStoreBranchRequest, opts ...grpc.CallOption) (*DeletePosStoreBranchResponse, error)
	ReadAllPosStoreBranches(ctx context.Context, in *ReadAllPosStoreBranchesRequest, opts ...grpc.CallOption) (*ReadAllPosStoreBranchesResponse, error)
}

type posStoreBranchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPosStoreBranchServiceClient(cc grpc.ClientConnInterface) PosStoreBranchServiceClient {
	return &posStoreBranchServiceClient{cc}
}

func (c *posStoreBranchServiceClient) CreatePosStoreBranch(ctx context.Context, in *CreatePosStoreBranchRequest, opts ...grpc.CallOption) (*CreatePosStoreBranchResponse, error) {
	out := new(CreatePosStoreBranchResponse)
	err := c.cc.Invoke(ctx, "/pos.PosStoreBranchService/CreatePosStoreBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posStoreBranchServiceClient) ReadPosStoreBranch(ctx context.Context, in *ReadPosStoreBranchRequest, opts ...grpc.CallOption) (*ReadPosStoreBranchResponse, error) {
	out := new(ReadPosStoreBranchResponse)
	err := c.cc.Invoke(ctx, "/pos.PosStoreBranchService/ReadPosStoreBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posStoreBranchServiceClient) UpdatePosStoreBranch(ctx context.Context, in *UpdatePosStoreBranchRequest, opts ...grpc.CallOption) (*UpdatePosStoreBranchResponse, error) {
	out := new(UpdatePosStoreBranchResponse)
	err := c.cc.Invoke(ctx, "/pos.PosStoreBranchService/UpdatePosStoreBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posStoreBranchServiceClient) DeletePosStoreBranch(ctx context.Context, in *DeletePosStoreBranchRequest, opts ...grpc.CallOption) (*DeletePosStoreBranchResponse, error) {
	out := new(DeletePosStoreBranchResponse)
	err := c.cc.Invoke(ctx, "/pos.PosStoreBranchService/DeletePosStoreBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posStoreBranchServiceClient) ReadAllPosStoreBranches(ctx context.Context, in *ReadAllPosStoreBranchesRequest, opts ...grpc.CallOption) (*ReadAllPosStoreBranchesResponse, error) {
	out := new(ReadAllPosStoreBranchesResponse)
	err := c.cc.Invoke(ctx, "/pos.PosStoreBranchService/ReadAllPosStoreBranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PosStoreBranchServiceServer is the server API for PosStoreBranchService service.
// All implementations must embed UnimplementedPosStoreBranchServiceServer
// for forward compatibility
type PosStoreBranchServiceServer interface {
	CreatePosStoreBranch(context.Context, *CreatePosStoreBranchRequest) (*CreatePosStoreBranchResponse, error)
	ReadPosStoreBranch(context.Context, *ReadPosStoreBranchRequest) (*ReadPosStoreBranchResponse, error)
	UpdatePosStoreBranch(context.Context, *UpdatePosStoreBranchRequest) (*UpdatePosStoreBranchResponse, error)
	DeletePosStoreBranch(context.Context, *DeletePosStoreBranchRequest) (*DeletePosStoreBranchResponse, error)
	ReadAllPosStoreBranches(context.Context, *ReadAllPosStoreBranchesRequest) (*ReadAllPosStoreBranchesResponse, error)
	mustEmbedUnimplementedPosStoreBranchServiceServer()
}

// UnimplementedPosStoreBranchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPosStoreBranchServiceServer struct {
}

func (UnimplementedPosStoreBranchServiceServer) CreatePosStoreBranch(context.Context, *CreatePosStoreBranchRequest) (*CreatePosStoreBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosStoreBranch not implemented")
}
func (UnimplementedPosStoreBranchServiceServer) ReadPosStoreBranch(context.Context, *ReadPosStoreBranchRequest) (*ReadPosStoreBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPosStoreBranch not implemented")
}
func (UnimplementedPosStoreBranchServiceServer) UpdatePosStoreBranch(context.Context, *UpdatePosStoreBranchRequest) (*UpdatePosStoreBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosStoreBranch not implemented")
}
func (UnimplementedPosStoreBranchServiceServer) DeletePosStoreBranch(context.Context, *DeletePosStoreBranchRequest) (*DeletePosStoreBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosStoreBranch not implemented")
}
func (UnimplementedPosStoreBranchServiceServer) ReadAllPosStoreBranches(context.Context, *ReadAllPosStoreBranchesRequest) (*ReadAllPosStoreBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllPosStoreBranches not implemented")
}
func (UnimplementedPosStoreBranchServiceServer) mustEmbedUnimplementedPosStoreBranchServiceServer() {}

// UnsafePosStoreBranchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PosStoreBranchServiceServer will
// result in compilation errors.
type UnsafePosStoreBranchServiceServer interface {
	mustEmbedUnimplementedPosStoreBranchServiceServer()
}

func RegisterPosStoreBranchServiceServer(s grpc.ServiceRegistrar, srv PosStoreBranchServiceServer) {
	s.RegisterService(&PosStoreBranchService_ServiceDesc, srv)
}

func _PosStoreBranchService_CreatePosStoreBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePosStoreBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosStoreBranchServiceServer).CreatePosStoreBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosStoreBranchService/CreatePosStoreBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosStoreBranchServiceServer).CreatePosStoreBranch(ctx, req.(*CreatePosStoreBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosStoreBranchService_ReadPosStoreBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPosStoreBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosStoreBranchServiceServer).ReadPosStoreBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosStoreBranchService/ReadPosStoreBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosStoreBranchServiceServer).ReadPosStoreBranch(ctx, req.(*ReadPosStoreBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosStoreBranchService_UpdatePosStoreBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePosStoreBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosStoreBranchServiceServer).UpdatePosStoreBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosStoreBranchService/UpdatePosStoreBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosStoreBranchServiceServer).UpdatePosStoreBranch(ctx, req.(*UpdatePosStoreBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosStoreBranchService_DeletePosStoreBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePosStoreBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosStoreBranchServiceServer).DeletePosStoreBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosStoreBranchService/DeletePosStoreBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosStoreBranchServiceServer).DeletePosStoreBranch(ctx, req.(*DeletePosStoreBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosStoreBranchService_ReadAllPosStoreBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllPosStoreBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosStoreBranchServiceServer).ReadAllPosStoreBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosStoreBranchService/ReadAllPosStoreBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosStoreBranchServiceServer).ReadAllPosStoreBranches(ctx, req.(*ReadAllPosStoreBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PosStoreBranchService_ServiceDesc is the grpc.ServiceDesc for PosStoreBranchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PosStoreBranchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pos.PosStoreBranchService",
	HandlerType: (*PosStoreBranchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePosStoreBranch",
			Handler:    _PosStoreBranchService_CreatePosStoreBranch_Handler,
		},
		{
			MethodName: "ReadPosStoreBranch",
			Handler:    _PosStoreBranchService_ReadPosStoreBranch_Handler,
		},
		{
			MethodName: "UpdatePosStoreBranch",
			Handler:    _PosStoreBranchService_UpdatePosStoreBranch_Handler,
		},
		{
			MethodName: "DeletePosStoreBranch",
			Handler:    _PosStoreBranchService_DeletePosStoreBranch_Handler,
		},
		{
			MethodName: "ReadAllPosStoreBranches",
			Handler:    _PosStoreBranchService_ReadAllPosStoreBranches_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "branch.proto",
}
