// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: supplier.proto

package lpha_pos_system_product_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PosSupplierServiceClient is the client API for PosSupplierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PosSupplierServiceClient interface {
	CreatePosSupplier(ctx context.Context, in *CreatePosSupplierRequest, opts ...grpc.CallOption) (*CreatePosSupplierResponse, error)
	ReadPosSupplier(ctx context.Context, in *ReadPosSupplierRequest, opts ...grpc.CallOption) (*ReadPosSupplierResponse, error)
	UpdatePosSupplier(ctx context.Context, in *UpdatePosSupplierRequest, opts ...grpc.CallOption) (*UpdatePosSupplierResponse, error)
	DeletePosSupplier(ctx context.Context, in *DeletePosSupplierRequest, opts ...grpc.CallOption) (*DeletePosSupplierResponse, error)
	ReadAllPosSuppliers(ctx context.Context, in *ReadAllPosSuppliersRequest, opts ...grpc.CallOption) (*ReadAllPosSuppliersResponse, error)
}

type posSupplierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPosSupplierServiceClient(cc grpc.ClientConnInterface) PosSupplierServiceClient {
	return &posSupplierServiceClient{cc}
}

func (c *posSupplierServiceClient) CreatePosSupplier(ctx context.Context, in *CreatePosSupplierRequest, opts ...grpc.CallOption) (*CreatePosSupplierResponse, error) {
	out := new(CreatePosSupplierResponse)
	err := c.cc.Invoke(ctx, "/pos.PosSupplierService/CreatePosSupplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posSupplierServiceClient) ReadPosSupplier(ctx context.Context, in *ReadPosSupplierRequest, opts ...grpc.CallOption) (*ReadPosSupplierResponse, error) {
	out := new(ReadPosSupplierResponse)
	err := c.cc.Invoke(ctx, "/pos.PosSupplierService/ReadPosSupplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posSupplierServiceClient) UpdatePosSupplier(ctx context.Context, in *UpdatePosSupplierRequest, opts ...grpc.CallOption) (*UpdatePosSupplierResponse, error) {
	out := new(UpdatePosSupplierResponse)
	err := c.cc.Invoke(ctx, "/pos.PosSupplierService/UpdatePosSupplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posSupplierServiceClient) DeletePosSupplier(ctx context.Context, in *DeletePosSupplierRequest, opts ...grpc.CallOption) (*DeletePosSupplierResponse, error) {
	out := new(DeletePosSupplierResponse)
	err := c.cc.Invoke(ctx, "/pos.PosSupplierService/DeletePosSupplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posSupplierServiceClient) ReadAllPosSuppliers(ctx context.Context, in *ReadAllPosSuppliersRequest, opts ...grpc.CallOption) (*ReadAllPosSuppliersResponse, error) {
	out := new(ReadAllPosSuppliersResponse)
	err := c.cc.Invoke(ctx, "/pos.PosSupplierService/ReadAllPosSuppliers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PosSupplierServiceServer is the server API for PosSupplierService service.
// All implementations must embed UnimplementedPosSupplierServiceServer
// for forward compatibility
type PosSupplierServiceServer interface {
	CreatePosSupplier(context.Context, *CreatePosSupplierRequest) (*CreatePosSupplierResponse, error)
	ReadPosSupplier(context.Context, *ReadPosSupplierRequest) (*ReadPosSupplierResponse, error)
	UpdatePosSupplier(context.Context, *UpdatePosSupplierRequest) (*UpdatePosSupplierResponse, error)
	DeletePosSupplier(context.Context, *DeletePosSupplierRequest) (*DeletePosSupplierResponse, error)
	ReadAllPosSuppliers(context.Context, *ReadAllPosSuppliersRequest) (*ReadAllPosSuppliersResponse, error)
	mustEmbedUnimplementedPosSupplierServiceServer()
}

// UnimplementedPosSupplierServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPosSupplierServiceServer struct {
}

func (UnimplementedPosSupplierServiceServer) CreatePosSupplier(context.Context, *CreatePosSupplierRequest) (*CreatePosSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosSupplier not implemented")
}
func (UnimplementedPosSupplierServiceServer) ReadPosSupplier(context.Context, *ReadPosSupplierRequest) (*ReadPosSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPosSupplier not implemented")
}
func (UnimplementedPosSupplierServiceServer) UpdatePosSupplier(context.Context, *UpdatePosSupplierRequest) (*UpdatePosSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosSupplier not implemented")
}
func (UnimplementedPosSupplierServiceServer) DeletePosSupplier(context.Context, *DeletePosSupplierRequest) (*DeletePosSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosSupplier not implemented")
}
func (UnimplementedPosSupplierServiceServer) ReadAllPosSuppliers(context.Context, *ReadAllPosSuppliersRequest) (*ReadAllPosSuppliersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllPosSuppliers not implemented")
}
func (UnimplementedPosSupplierServiceServer) mustEmbedUnimplementedPosSupplierServiceServer() {}

// UnsafePosSupplierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PosSupplierServiceServer will
// result in compilation errors.
type UnsafePosSupplierServiceServer interface {
	mustEmbedUnimplementedPosSupplierServiceServer()
}

func RegisterPosSupplierServiceServer(s grpc.ServiceRegistrar, srv PosSupplierServiceServer) {
	s.RegisterService(&PosSupplierService_ServiceDesc, srv)
}

func _PosSupplierService_CreatePosSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePosSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosSupplierServiceServer).CreatePosSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosSupplierService/CreatePosSupplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosSupplierServiceServer).CreatePosSupplier(ctx, req.(*CreatePosSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosSupplierService_ReadPosSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPosSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosSupplierServiceServer).ReadPosSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosSupplierService/ReadPosSupplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosSupplierServiceServer).ReadPosSupplier(ctx, req.(*ReadPosSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosSupplierService_UpdatePosSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePosSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosSupplierServiceServer).UpdatePosSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosSupplierService/UpdatePosSupplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosSupplierServiceServer).UpdatePosSupplier(ctx, req.(*UpdatePosSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosSupplierService_DeletePosSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePosSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosSupplierServiceServer).DeletePosSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosSupplierService/DeletePosSupplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosSupplierServiceServer).DeletePosSupplier(ctx, req.(*DeletePosSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosSupplierService_ReadAllPosSuppliers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllPosSuppliersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosSupplierServiceServer).ReadAllPosSuppliers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosSupplierService/ReadAllPosSuppliers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosSupplierServiceServer).ReadAllPosSuppliers(ctx, req.(*ReadAllPosSuppliersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PosSupplierService_ServiceDesc is the grpc.ServiceDesc for PosSupplierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PosSupplierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pos.PosSupplierService",
	HandlerType: (*PosSupplierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePosSupplier",
			Handler:    _PosSupplierService_CreatePosSupplier_Handler,
		},
		{
			MethodName: "ReadPosSupplier",
			Handler:    _PosSupplierService_ReadPosSupplier_Handler,
		},
		{
			MethodName: "UpdatePosSupplier",
			Handler:    _PosSupplierService_UpdatePosSupplier_Handler,
		},
		{
			MethodName: "DeletePosSupplier",
			Handler:    _PosSupplierService_DeletePosSupplier_Handler,
		},
		{
			MethodName: "ReadAllPosSuppliers",
			Handler:    _PosSupplierService_ReadAllPosSuppliers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "supplier.proto",
}
